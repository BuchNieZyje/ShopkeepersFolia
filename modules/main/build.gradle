plugins {
	id 'java-library'
	id 'maven-publish'
	id 'com.github.johnrengelman.shadow'
}

repositories {
	// WorldGuard
	maven { url 'https://maven.enginehub.org/repo/' }
	// Citizens
	maven { url 'https://repo.citizensnpcs.co' }
	// bStats
	maven { url 'https://repo.codemc.org/repository/maven-public/' }
	// Towny, VaultAPI
	maven { url 'https://jitpack.io' }
}

dependencies {
	api project(':shopkeepers-api')
	// compileOnly: Omits these dependencies from the transitively inherited apiElements and runtimeElements.
	// However, we need to manually add these dependencies to our test dependencies if needed.
	compileOnly libs.spigot.api // Includes the Bukkit API
	compileOnly libs.worldguard.bukkit
	compileOnly libs.towny
	compileOnly libs.citizens.main
	compileOnly libs.vault.api
	compileOnly libs.bstats.bukkit

	testImplementation libs.spigot.api
	testImplementation libs.junit
	testImplementation libs.craftbukkit
}

test {
	exclude 'com/nisovin/shopkeepers/PerformanceTests.class'
}

processResources {
	inputs.property 'pluginVersion', pluginVersion
	inputs.property 'dboUrl', dboUrl

	filesMatching('plugin.yml') {
		expand([
			'pluginVersion': pluginVersion,
			'dboUrl': dboUrl
		])
	}
}

jar {
	// We only require the output of the shadowJar task.
	enabled false
}

/*
java {
	withJavadocJar()
}

javadocJar {
	configureJarTask(project, it)
}

javadoc {
	//options.addStringOption('Xdoclint:none')
	options.addStringOption('Xmaxwarns', '1')
}
*/

shadowJar {
	configureJarTaskWithMavenMetadata(project, it)
	// No classifier: Replaces the normal classifier-less jar file (if there is one).
	archiveClassifier = ''
	configurations = [project.configurations.compileClasspath]
	dependencies {
		include(dependency(libs.bstats.bukkit.get()))
	}
	relocate 'org.bstats.bukkit', "${project.group}.libs.bstats"
}

configureShadowArtifacts(project)

// Copies the project's jars into the build folder of the root project.
task copyResults(type: Copy) {
	from shadowJar
	into rootProject.buildDir
}

assemble {
	dependsOn shadowJar
	dependsOn copyResults
}

publishing {
	publications {
		mavenJava(MavenPublication) { publication ->
			configureShadowMavenPublication(project, publication)
		}
	}
}
